#!/usr/bin/python
import sys
import os
import re
import math

#usage
if(len(sys.argv)!=6):
	print "USAGE: python alignToFasta.py [WindowedBedFile] [FastaFile (.fa)] [Window_size] [OutputFile] [ErrFile]"
else:
	#extract parameters
	bedFile = sys.argv[1]
	fastaFile = sys.argv[2]
	if('.fasta' in fastaFile):
		print "Wrong type of Fasta -- must be .fa after running bed tools"
		sys.exit(1)
	win_size = int((int(sys.argv[3])-1) / 2)
	outFile = sys.argv[4]
	errFile = sys.argv[5]

	#open
	fBed = open(bedFile,'r')
	ffa = open(fastaFile,'r')
	fout = open(outFile,'w')
	ferr = open(errFile,'w')

	#loop
	for line in fBed:

		#extract parts of bed line
		lineParts = line.split('\t')
		chrs = lineParts[0].strip()
		start = int(lineParts[1].strip())
		ref = lineParts[3].strip()
		alt = lineParts[4].strip()

		#extract fasta str (second line in pair of lines)
		fastaStr = ffa.readline()
		fastaStr = ffa.readline()
		
		#gen output line
		if(ref in fastaStr):

			#find all occurences, compute min distance to centroid of window.
			allOcc = [m.start() for m in re.finditer(ref,fastaStr)]
			allOccCentroid = [math.fabs(allOcc[x]-win_size) for x in range(0,len(allOcc))]
			minVal = min(allOccCentroid)
			minInd = [i for i, v in enumerate(allOccCentroid) if v==minVal]
			myOffset = allOcc[minInd[0]]-win_size			

			#one-base align everything (matching UCSC genome browser)
			newStart = (start+win_size) + myOffset + 1
			newEnd = newStart + len(ref) - 1

			#output
			newLine = chrs + '\t' + str(newStart) + '\t' + str(newEnd) + '\t' + ref + '\t' + alt
			fout.write(newLine + '\n')
		else:
			ferr.write(line.strip() + '\n')
